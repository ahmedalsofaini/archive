# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'INSERTDOC.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Import QRCode from pyqrcode

import full_doc_text
import pyqrcode
import os
from hijri_converter import Hijri, Gregorian
import datetime
from PyQt5 import QtCore, QtGui, QtWidgets 
from pathlib import Path
import cv2
import numpy as np
from pyzbar.pyzbar import decode
from PyQt5.QtWidgets import  QTableWidgetItem, QMessageBox,QDateEdit,QCompleter
import DatabaseClass
import create_word_file
import CheckClass
import sumFun
from PyQt5.QtWidgets import *
from PyQt5 import QtCore
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5 import *
from PyQt5.QtWidgets import  *
from tafkeet import tafkeet
from tafkeet_2 import number_to_word
import pyarabic.number as nb

class Ui_Widget(object):


    def setupUi(self, Widget):
        Widget.setObjectName("Widget")
        Widget.resize(1151, 804)
        Widget.setLayoutDirection(Qt.RightToLeft)
        self.tabWidget=QtWidgets.QTabWidget(Widget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 80, 1141, 721))
        self.tabWidget.setObjectName("tabWidget")
        self.tab=QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.c_tableWidget=QtWidgets.QTableWidget(self.tab)

        self.c_tableWidget.setGeometry(QtCore.QRect(10, 430, 771, 221))
        self.c_tableWidget.setObjectName("c_tableWidget")
        self.c_tableWidget.setColumnCount(10)
        self.c_tableWidget.setRowCount(0)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(0, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(1, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(2, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(3, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(4, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(5, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(6, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(7, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(8, item)
        item=QtWidgets.QTableWidgetItem()
        self.c_tableWidget.setHorizontalHeaderItem(9, item)
        
        self.C_no_lineEdit=QtWidgets.QLineEdit(self.tab)
        self.C_no_lineEdit.setGeometry(QtCore.QRect(980, 50, 121, 38))
        self.C_no_lineEdit.setObjectName("C_no_lineEdit")


        self.Cd_Type_comboBox=QtWidgets.QComboBox(self.tab)
        self.Cd_Type_comboBox.setGeometry(QtCore.QRect(760, 50, 181, 38))
        self.Cd_Type_comboBox.setObjectName("Cd_Type_comboBox")
        self.Cd_Type_comboBox.addItem("مشتري",1)
        self.Cd_Type_comboBox.addItem("بائع",2)
        self.Cd_Type_comboBox.addItem("قابل الشراء",3)
        self.Cd_Type_comboBox.addItem("وكيل البائع",4)
        self.Cd_Type_comboBox.addItem("معرف بالمشتري",5)
        self.Cd_Type_comboBox.addItem("معرف بالبائع",6)
        self.Cd_Type_comboBox.addItem("العدل المثمن",7)
        self.Cd_Type_comboBox.addItem("شاهد",8) 

        self.C_name_lineEdit=QtWidgets.QLineEdit(self.tab)
        self.C_name_lineEdit.setGeometry(QtCore.QRect(760, 130, 341, 38))
        self.C_name_lineEdit.setObjectName("C_name_lineEdit")

        self.C_address_lineEdit=QtWidgets.QLineEdit(self.tab)
        self.C_address_lineEdit.setGeometry(QtCore.QRect(760, 210, 341, 38))
        self.C_address_lineEdit.setObjectName("C_address_lineEdit")

        self.c_maleOrFemale_comboBox=QtWidgets.QComboBox(self.tab)
        self.c_maleOrFemale_comboBox.setGeometry(QtCore.QRect(960, 290, 151, 38))
        self.c_maleOrFemale_comboBox.setObjectName("c_maleOrFemale_comboBox")
        self.c_maleOrFemale_comboBox.addItem("ذكر",1)
        self.c_maleOrFemale_comboBox.addItem("انثى",2)

        self.card_type_comboBox=QtWidgets.QComboBox(self.tab)
        self.card_type_comboBox.setGeometry(QtCore.QRect(760, 290, 181, 38))
        self.card_type_comboBox.setObjectName("card_type_comboBox")
        self.card_type_comboBox.addItem("بطاقة شخصية",1)
        self.card_type_comboBox.addItem("جواز سفر",2)
        self.card_type_comboBox.addItem("رخصة قيادة",3)
        self.card_type_comboBox.addItem("غير ذلك",4)

        self.Card_number_lineEdit=QtWidgets.QLineEdit(self.tab)
        self.Card_number_lineEdit.setGeometry(QtCore.QRect(800, 380, 281, 38))
        self.Card_number_lineEdit.setObjectName("Card_number_lineEdit")

        self.Card_place_lineEdit=QtWidgets.QLineEdit(self.tab)
        self.Card_place_lineEdit.setGeometry(QtCore.QRect(800, 460, 281, 38))
        self.Card_place_lineEdit.setObjectName("Card_place_lineEdit")

        self.card_date_Edit=QDateEdit(self.tab)
        self.card_date_Edit.setGeometry(QtCore.QRect(850, 540, 181, 42))
        self.card_date_Edit.setObjectName("card_date_Edit")

        self.C_saved_or_not_lineEdit=QtWidgets.QLineEdit(self.tab)
        self.C_saved_or_not_lineEdit.setGeometry(QtCore.QRect(1060, 620, 61, 38))
        self.C_saved_or_not_lineEdit.setObjectName("C_saved_or_not_lineEdit")

    # the value 1 means no change value 2 means no change value 3 name change value 4 means card no change  

        self.change_no_or_name_or_card_number=QtWidgets.QLineEdit(self.tab)
        self.change_no_or_name_or_card_number.setGeometry(QtCore.QRect( 1031, 620, 20, 38))
        self.change_no_or_name_or_card_number.setObjectName("change_no_or_name_or_card_number")


        self.Add_Custom_Button=QtWidgets.QPushButton(self.tab)
        self.Add_Custom_Button.setGeometry(QtCore.QRect(620, 370, 131, 48))
        self.Add_Custom_Button.setObjectName("Add_Custom_Button")

        self.Scanner_Card_Button=QtWidgets.QPushButton(self.tab)
        self.Scanner_Card_Button.setGeometry(QtCore.QRect(480, 370, 131, 48))
        self.Scanner_Card_Button.setObjectName("Scanner_Card_Button")
        self.Scanner_face_Button=QtWidgets.QPushButton(self.tab)
        self.Scanner_face_Button.setGeometry(QtCore.QRect(350, 370, 121, 48))
        self.Scanner_face_Button.setObjectName("Scanner_face_Button")

        self.add_photo_Button=QtWidgets.QPushButton(self.tab)
        self.add_photo_Button.setGeometry(QtCore.QRect(200, 370, 141, 48))
        self.add_photo_Button.setObjectName("add_photo_Button")

        self.delete_Custom_Button=QtWidgets.QPushButton(self.tab)
        self.delete_Custom_Button.setGeometry(QtCore.QRect(60, 370, 131, 48))
        self.delete_Custom_Button.setObjectName("delete_Custom_Button")





        self.label_6=QtWidgets.QLabel(self.tab)
        self.label_6.setGeometry(QtCore.QRect(810, 10, 71, 32))
        self.label_6.setObjectName("label_6")
        self.label=QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(890, 90, 61, 32))
        self.label.setObjectName("label")
        self.label_3=QtWidgets.QLabel(self.tab)
        self.label_3.setGeometry(QtCore.QRect(890, 340, 111, 32))
        self.label_3.setObjectName("label_3")
        self.label_2=QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(790, 250, 111, 32))
        self.label_2.setObjectName("label_2")
        self.label_4=QtWidgets.QLabel(self.tab)
        self.label_4.setGeometry(QtCore.QRect(880, 420, 131, 32))
        self.label_4.setObjectName("label_4")
        self.label_5=QtWidgets.QLabel(self.tab)
        self.label_5.setGeometry(QtCore.QRect(870, 500, 131, 32))
        self.label_5.setObjectName("label_5")
        
        self.label_11=QtWidgets.QLabel(self.tab)
        self.label_11.setGeometry(QtCore.QRect(990, 250, 71, 32))
        self.label_11.setObjectName("label_11")

        self.label_41=QtWidgets.QLabel(self.tab)
        self.label_41.setGeometry(QtCore.QRect(880, 170, 81, 32))
        self.label_41.setObjectName("label_41")
        self.card_photo_1_label=QtWidgets.QLabel(self.tab)
        self.card_photo_1_label.setGeometry(QtCore.QRect(480, 200, 111, 32))
        self.card_photo_1_label.setObjectName("card_photo_1_label")
        self.card_photo_2_label=QtWidgets.QLabel(self.tab)
        self.card_photo_2_label.setGeometry(QtCore.QRect(100, 190, 111, 32))
        self.card_photo_2_label.setObjectName("card_photo_2_label")

        self.label_59=QtWidgets.QLabel(self.tab)
        self.label_59.setGeometry(QtCore.QRect(980, 10, 111, 32))
        self.label_59.setObjectName("label_59")
        self.c_photo_label=QtWidgets.QLabel(self.tab)
        self.c_photo_label.setGeometry(QtCore.QRect(290, 70, 111, 32))
        self.c_photo_label.setObjectName("c_photo_label")
        self.label_61=QtWidgets.QLabel(self.tab)
        self.label_61.setGeometry(QtCore.QRect(1060, 590, 61, 32))
        self.label_61.setObjectName("label_61")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2=QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.sd_name_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_name_lineEdit.setGeometry(QtCore.QRect(782, 50, 181, 38))
        self.sd_name_lineEdit.setObjectName("sd_name_lineEdit")
        self.label_7=QtWidgets.QLabel(self.tab_2)
        self.label_7.setGeometry(QtCore.QRect(810, 10, 131, 32))
        self.label_7.setObjectName("label_7")
        self.Sd_count_n_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.Sd_count_n_lineEdit.setGeometry(QtCore.QRect(590, 50, 181, 38))
        self.Sd_count_n_lineEdit.setObjectName("Sd_count_n_lineEdit")
        self.label_8=QtWidgets.QLabel(self.tab_2)
        self.label_8.setGeometry(QtCore.QRect(610, 10, 161, 32))
        self.label_8.setObjectName("label_8")
        self.Sd_count_k_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.Sd_count_k_lineEdit.setGeometry(QtCore.QRect(300, 50, 281, 38))
        self.Sd_count_k_lineEdit.setObjectName("Sd_count_k_lineEdit")
        self.label_9=QtWidgets.QLabel(self.tab_2)
        self.label_9.setGeometry(QtCore.QRect(350, 10, 171, 32))
        self.label_9.setObjectName("label_9")



        self.sd_type_comboBox=QtWidgets.QComboBox(self.tab_2)
        self.sd_type_comboBox.setGeometry(QtCore.QRect(20, 50, 141, 38))
        self.sd_type_comboBox.setObjectName("sd_type_comboBox")
        self.sd_type_comboBox.addItem("هادي",1)
        self.sd_type_comboBox.addItem("عشاري",2)
        self.sd_type_comboBox.addItem("غير ذلك",3)

        self.label_10=QtWidgets.QLabel(self.tab_2)
        self.label_10.setGeometry(QtCore.QRect(160, 50, 121, 32))
        self.label_10.setObjectName("label_10")
        self.sd_a1_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_a1_lineEdit.setGeometry(QtCore.QRect(520, 140, 181, 38))
        self.sd_a1_lineEdit.setObjectName("sd_a1_lineEdit")
        self.label_12=QtWidgets.QLabel(self.tab_2)
        self.label_12.setGeometry(QtCore.QRect(570, 100, 81, 32))
        self.label_12.setObjectName("label_12")
        self.sd_shape_comboBox=QtWidgets.QComboBox(self.tab_2)
        self.sd_shape_comboBox.setGeometry(QtCore.QRect(710, 140, 141, 38))
        self.sd_shape_comboBox.setObjectName("sd_shape_comboBox")
        self.sd_shape_comboBox.addItem("")
        self.sd_shape_comboBox.addItem("")
        self.sd_shape_comboBox.addItem("")
        self.sd_shape_comboBox.addItem("")
        self.sd_shape_comboBox.addItem("")
        self.sd_shape_comboBox.addItem("")
        self.label_22=QtWidgets.QLabel(self.tab_2)
        self.label_22.setGeometry(QtCore.QRect(850, 140, 131, 32))
        self.label_22.setObjectName("label_22")
        self.sd_a2_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_a2_lineEdit.setGeometry(QtCore.QRect(330, 140, 181, 38))
        self.sd_a2_lineEdit.setObjectName("sd_a2_lineEdit")
        self.label_23=QtWidgets.QLabel(self.tab_2)
        self.label_23.setGeometry(QtCore.QRect(380, 100, 81, 32))
        self.label_23.setObjectName("label_23")
        self.sd_a3_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_a3_lineEdit.setGeometry(QtCore.QRect(140, 140, 181, 38))
        self.sd_a3_lineEdit.setObjectName("sd_a3_lineEdit")
        self.label_24=QtWidgets.QLabel(self.tab_2)
        self.label_24.setGeometry(QtCore.QRect(190, 100, 81, 32))
        self.label_24.setObjectName("label_24")
        self.sd_area_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_area_lineEdit.setGeometry(QtCore.QRect(140, 220, 181, 38))
        self.sd_area_lineEdit.setObjectName("sd_area_lineEdit")
        self.label_25=QtWidgets.QLabel(self.tab_2)
        self.label_25.setGeometry(QtCore.QRect(110, 180, 221, 32))
        self.label_25.setObjectName("label_25")
        self.sd_a5_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_a5_lineEdit.setGeometry(QtCore.QRect(330, 220, 181, 38))
        self.sd_a5_lineEdit.setObjectName("sd_a5_lineEdit")
        self.label_26=QtWidgets.QLabel(self.tab_2)
        self.label_26.setGeometry(QtCore.QRect(380, 180, 81, 32))
        self.label_26.setObjectName("label_26")
        self.sd_a4_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_a4_lineEdit.setGeometry(QtCore.QRect(520, 220, 181, 38))
        self.sd_a4_lineEdit.setObjectName("sd_a4_lineEdit")
        self.label_27=QtWidgets.QLabel(self.tab_2)
        self.label_27.setGeometry(QtCore.QRect(570, 180, 81, 32))
        self.label_27.setObjectName("label_27")
        self.sd_h1_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_h1_lineEdit.setGeometry(QtCore.QRect(600, 300, 311, 38))
        self.sd_h1_lineEdit.setObjectName("sd_h1_lineEdit")
        self.label_31=QtWidgets.QLabel(self.tab_2)
        self.label_31.setGeometry(QtCore.QRect(920, 300, 111, 32))
        self.label_31.setObjectName("label_31")
        self.sd_h2_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_h2_lineEdit.setGeometry(QtCore.QRect(150, 300, 311, 38))
        self.sd_h2_lineEdit.setObjectName("sd_h2_lineEdit")
        self.label_32=QtWidgets.QLabel(self.tab_2)
        self.label_32.setGeometry(QtCore.QRect(470, 300, 121, 32))
        self.label_32.setObjectName("label_32")
        self.sd_h4_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_h4_lineEdit.setGeometry(QtCore.QRect(150, 350, 311, 38))
        self.sd_h4_lineEdit.setObjectName("sd_h4_lineEdit")
        self.label_33=QtWidgets.QLabel(self.tab_2)
        self.label_33.setGeometry(QtCore.QRect(920, 350, 121, 32))
        self.label_33.setObjectName("label_33")
        self.sd_h3_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_h3_lineEdit.setGeometry(QtCore.QRect(600, 350, 311, 38))
        self.sd_h3_lineEdit.setObjectName("sd_h3_lineEdit")
        self.label_34=QtWidgets.QLabel(self.tab_2)
        self.label_34.setGeometry(QtCore.QRect(470, 350, 121, 32))
        self.label_34.setObjectName("label_34")
        self.sd_tableWidget=QtWidgets.QTableWidget(self.tab_2)
        self.sd_tableWidget.setGeometry(QtCore.QRect(20, 400, 361, 181))
        self.sd_tableWidget.setObjectName("sd_tableWidget")
        self.sd_tableWidget.setColumnCount(20)
        self.sd_tableWidget.setRowCount(0)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(0, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(1, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(2, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(3, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(4, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(5, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(6, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(7, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(8, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(9, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(10, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(11, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(12, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(13, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(14, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(15, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(16, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(17, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(18, item)
        item=QtWidgets.QTableWidgetItem()
        self.sd_tableWidget.setHorizontalHeaderItem(19, item)

        self.sd_save_pushButton=QtWidgets.QPushButton(self.tab_2)
        self.sd_save_pushButton.setGeometry(QtCore.QRect(280, 590, 101, 41))
        self.sd_save_pushButton.setObjectName("sd_save_pushButton")
        self.sd_delete_pushButton=QtWidgets.QPushButton(self.tab_2)
        self.sd_delete_pushButton.setGeometry(QtCore.QRect(60, 590, 101, 41))
        self.sd_delete_pushButton.setObjectName("sd_delete_pushButton")
        self.sd_total_k_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_total_k_lineEdit.setGeometry(QtCore.QRect(440, 520, 461, 38))
        self.sd_total_k_lineEdit.setObjectName("sd_total_k_lineEdit")
        self.all_price_n_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.all_price_n_lineEdit.setGeometry(QtCore.QRect(910, 610, 181, 38))
        self.all_price_n_lineEdit.setObjectName("all_price_n_lineEdit")
        self.label_47=QtWidgets.QLabel(self.tab_2)
        self.label_47.setGeometry(QtCore.QRect(880, 480, 241, 32))
        self.label_47.setObjectName("label_47")
        self.label_48=QtWidgets.QLabel(self.tab_2)
        self.label_48.setGeometry(QtCore.QRect(910, 400, 171, 32))
        self.label_48.setObjectName("label_48")
        self.sd_price_n_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_price_n_lineEdit.setGeometry(QtCore.QRect(910, 440, 181, 38))
        self.sd_price_n_lineEdit.setObjectName("sd_price_n_lineEdit")
        self.sd_total_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_total_lineEdit.setGeometry(QtCore.QRect(910, 520, 181, 38))
        self.sd_total_lineEdit.setObjectName("sd_total_lineEdit")
        self.label_49=QtWidgets.QLabel(self.tab_2)
        self.label_49.setGeometry(QtCore.QRect(610, 570, 171, 32))
        self.label_49.setObjectName("label_49")
        self.label_50=QtWidgets.QLabel(self.tab_2)
        self.label_50.setGeometry(QtCore.QRect(670, 400, 171, 32))
        self.label_50.setObjectName("label_50")
        self.label_51=QtWidgets.QLabel(self.tab_2)
        self.label_51.setGeometry(QtCore.QRect(910, 570, 171, 32))
        self.label_51.setObjectName("label_51")
        self.sd_price_k_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.sd_price_k_lineEdit.setGeometry(QtCore.QRect(440, 440, 461, 38))
        self.sd_price_k_lineEdit.setObjectName("sd_price_k_lineEdit")
        self.label_52=QtWidgets.QLabel(self.tab_2)
        self.label_52.setGeometry(QtCore.QRect(590, 480, 251, 32))
        self.label_52.setObjectName("label_52")
        self.all_price_k_lineEdit=QtWidgets.QLineEdit(self.tab_2)
        self.all_price_k_lineEdit.setGeometry(QtCore.QRect(440, 610, 461, 38))
        self.all_price_k_lineEdit.setObjectName("all_price_k_lineEdit")
        self.sd_add_pushButton=QtWidgets.QPushButton(self.tab_2)
        self.sd_add_pushButton.setGeometry(QtCore.QRect(170, 590, 101, 41))
        self.sd_add_pushButton.setObjectName("sd_add_pushButton")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3=QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.c_name_lineEdit2=QtWidgets.QLineEdit(self.tab_3)
        self.c_name_lineEdit2.setGeometry(QtCore.QRect(640, 110, 241, 38))
        self.c_name_lineEdit2.setObjectName("c_name_lineEdit2")
        self.d_t_place_lineEdit1=QtWidgets.QLineEdit(self.tab_3)
        self.d_t_place_lineEdit1.setGeometry(QtCore.QRect(700, 340, 181, 38))
        self.d_t_place_lineEdit1.setObjectName("d_t_place_lineEdit1")
        self.label_13=QtWidgets.QLabel(self.tab_3)
        self.label_13.setGeometry(QtCore.QRect(900, 220, 121, 32))
        self.label_13.setObjectName("label_13")
        self.label_15=QtWidgets.QLabel(self.tab_3)
        self.label_15.setGeometry(QtCore.QRect(910, 110, 111, 32))
        self.label_15.setObjectName("label_15")
        self.tableWidget_2=QtWidgets.QTableWidget(self.tab_3)
        self.tableWidget_2.setGeometry(QtCore.QRect(20, 50, 611, 261))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(20)
        self.tableWidget_2.setRowCount(0)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(5, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(6, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(7, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(8, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(9, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(10, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(11, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(12, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(13, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(14, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(15, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(16, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(17, item)
        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(18, item)

        item=QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(19, item)

        self.label_17=QtWidgets.QLabel(self.tab_3)
        self.label_17.setGeometry(QtCore.QRect(900, 60, 121, 32))
        self.label_17.setObjectName("label_17")
        self.label_18=QtWidgets.QLabel(self.tab_3)
        self.label_18.setGeometry(QtCore.QRect(890, 340, 131, 32))
        self.label_18.setObjectName("label_18")
        self.label_19=QtWidgets.QLabel(self.tab_3)
        self.label_19.setGeometry(QtCore.QRect(430, 10, 201, 32))
        self.label_19.setObjectName("label_19")
        self.label_16=QtWidgets.QLabel(self.tab_3)
        self.label_16.setGeometry(QtCore.QRect(910, 160, 111, 32))
        self.label_16.setObjectName("label_16")
        self.d_t_no_lineEdit1=QtWidgets.QLineEdit(self.tab_3)
        self.d_t_no_lineEdit1.setGeometry(QtCore.QRect(700, 500, 181, 38))
        self.d_t_no_lineEdit1.setObjectName("d_t_no_lineEdit1")
        self.label_20=QtWidgets.QLabel(self.tab_3)
        self.label_20.setGeometry(QtCore.QRect(890, 500, 131, 32))
        self.label_20.setObjectName("label_20")
        self.label_21=QtWidgets.QLabel(self.tab_3)
        self.label_21.setGeometry(QtCore.QRect(900, 10, 121, 32))
        self.label_21.setObjectName("label_21")
        self.seller_comboBox=QtWidgets.QComboBox(self.tab_3)
        self.seller_comboBox.setGeometry(QtCore.QRect(700, 10, 181, 38))
        self.seller_comboBox.setObjectName("seller_comboBox")



        

        self.doc_type_comboBox=QtWidgets.QComboBox(self.tab_3)
        self.doc_type_comboBox.setGeometry(QtCore.QRect(700, 60, 181, 38))
        
        self.doc_type_comboBox.setObjectName("doc_type_comboBox")
        self.doc_type_comboBox.addItem("شراء",1)
        self.doc_type_comboBox.addItem("ارث",2)
        self.doc_type_comboBox.addItem("نقل",3)
        self.doc_type_comboBox.addItem("هبة",4)
        self.doc_type_comboBox.addItem("تنازل",5)
        self.doc_type_comboBox.addItem("وكالة مبيع",6)
        self.doc_type_comboBox.addItem("حكم انحصار وراثي",7)
        self.doc_type_comboBox.addItem("اجازة",8)
        self.doc_type_comboBox.addItem("تعويض",9)
        self.doc_type_comboBox.addItem("غير ذلك",10)



        self.sc_delete_pushButton=QtWidgets.QPushButton(self.tab_3)
        self.sc_delete_pushButton.setGeometry(QtCore.QRect(30, 400, 150, 48))
        self.sc_delete_pushButton.setObjectName("sc_delete_pushButton")
        self.sc_scanner_doc_pushButton=QtWidgets.QPushButton(self.tab_3)
        self.sc_scanner_doc_pushButton.setGeometry(QtCore.QRect(190, 400, 150, 48))
        self.sc_scanner_doc_pushButton.setObjectName("sc_scanner_doc_pushButton")
        self.sc_add_pushButton=QtWidgets.QPushButton(self.tab_3)
        self.sc_add_pushButton.setGeometry(QtCore.QRect(350, 400, 150, 48))
        self.sc_add_pushButton.setObjectName("sc_add_pushButton")
        self.D_saved_or_not_lineEdit1=QtWidgets.QLineEdit(self.tab_3)
        self.D_saved_or_not_lineEdit1.setGeometry(QtCore.QRect(20, 610, 61, 38))
        self.D_saved_or_not_lineEdit1.setObjectName("D_saved_or_not_lineEdit1")
        self.label_62=QtWidgets.QLabel(self.tab_3)
        self.label_62.setGeometry(QtCore.QRect(20, 570, 61, 32))
        self.label_62.setObjectName("label_62")
        self.label_42=QtWidgets.QLabel(self.tab_3)
        self.label_42.setGeometry(QtCore.QRect(890, 270, 131, 32))
        self.label_42.setObjectName("label_42")
        self.D_hijri_date_Edit1=QtWidgets.QDateEdit(self.tab_3)
        self.D_hijri_date_Edit1.setGeometry(QtCore.QRect(700, 220, 181, 42))
        self.D_hijri_date_Edit1.setObjectName("D_hijri_date_Edit1")
        self.D_miladi_date_Edit1=QtWidgets.QDateEdit(self.tab_3)
        self.D_miladi_date_Edit1.setGeometry(QtCore.QRect(700, 270, 181, 42))
        self.D_miladi_date_Edit1.setObjectName("D_miladi_date_Edit1")

        self.label_43=QtWidgets.QLabel(self.tab_3)
        self.label_43.setGeometry(QtCore.QRect(910, 550, 101, 32))
        self.label_43.setObjectName("label_43")
        self.d_no_lineEdit1=QtWidgets.QLineEdit(self.tab_3)
        self.d_no_lineEdit1.setGeometry(QtCore.QRect(480, 350, 141, 38))
        self.d_no_lineEdit1.setObjectName("d_no_lineEdit1")
        self.label_65=QtWidgets.QLabel(self.tab_3)
        self.label_65.setGeometry(QtCore.QRect(500, 310, 111, 32))
        self.label_65.setObjectName("label_65")
        self.label_14=QtWidgets.QLabel(self.tab_3)
        self.label_14.setGeometry(QtCore.QRect(900, 400, 121, 32))
        self.label_14.setObjectName("label_14")
        self.D_m_t_date_Edit1=QtWidgets.QDateEdit(self.tab_3)
        self.D_m_t_date_Edit1.setGeometry(QtCore.QRect(700, 450, 181, 42))
        self.D_m_t_date_Edit1.setObjectName("D_m_t_date_Edit1")
        self.label_45=QtWidgets.QLabel(self.tab_3)
        self.label_45.setGeometry(QtCore.QRect(890, 450, 131, 32))
        self.label_45.setObjectName("label_45")
        self.D_h_t_date_Edit1=QtWidgets.QDateEdit(self.tab_3)
        self.D_h_t_date_Edit1.setGeometry(QtCore.QRect(700, 400, 181, 42))
        self.D_h_t_date_Edit1.setObjectName("D_h_t_date_Edit1")
        self.sc_save_pushButton=QtWidgets.QPushButton(self.tab_3)
        self.sc_save_pushButton.setGeometry(QtCore.QRect(510, 400, 150, 48))
        self.sc_save_pushButton.setObjectName("sc_save_pushButton")
        self.c_name_lineEdit3=QtWidgets.QLineEdit(self.tab_3)
        self.c_name_lineEdit3.setGeometry(QtCore.QRect(640, 160, 241, 38))
        self.c_name_lineEdit3.setObjectName("c_name_lineEdit3")
        self.c_no_lineEdit_4=QtWidgets.QLineEdit(self.tab_3)
        self.c_no_lineEdit_4.setGeometry(QtCore.QRect(330, 350, 141, 38))
        self.c_no_lineEdit_4.setObjectName("c_no_lineEdit_4")
        self.label_70=QtWidgets.QLabel(self.tab_3)
        self.label_70.setGeometry(QtCore.QRect(330, 310, 151, 32))
        self.label_70.setObjectName("label_70")
        self.c_no_lineEdit_5=QtWidgets.QLineEdit(self.tab_3)
        self.c_no_lineEdit_5.setGeometry(QtCore.QRect(170, 350, 141, 38))
        self.c_no_lineEdit_5.setObjectName("c_no_lineEdit_5")
        self.label_71=QtWidgets.QLabel(self.tab_3)
        self.label_71.setGeometry(QtCore.QRect(190, 310, 101, 32))
        self.label_71.setObjectName("label_71")
        self.label_72=QtWidgets.QLabel(self.tab_3)
        self.label_72.setGeometry(QtCore.QRect(10, 310, 171, 32))
        self.label_72.setObjectName("label_72")
        self.c_no_lineEdit_6=QtWidgets.QLineEdit(self.tab_3)
        self.c_no_lineEdit_6.setGeometry(QtCore.QRect(20, 350, 141, 38))
        self.c_no_lineEdit_6.setObjectName("c_no_lineEdit_6")
 
 
 


        self.D_connect_qrcode=QtWidgets.QLineEdit(self.tab_3)
        self.D_connect_qrcode.setGeometry(QtCore.QRect(20, 550, 201, 38))
        self.D_connect_qrcode.setObjectName("D_connect_qrcode")
 
 
        self.D_connect_save_or_not=QtWidgets.QLineEdit(self.tab_3)
        self.D_connect_save_or_not.setGeometry(QtCore.QRect(20, 600, 51, 38))
        self.D_connect_save_or_not.setObjectName("D_connect_save_or_not")






 
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4=QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.d_file_no_lineEdit=QtWidgets.QLineEdit(self.tab_4)
        self.d_file_no_lineEdit.setGeometry(QtCore.QRect(630, 150, 181, 38))
        self.d_file_no_lineEdit.setObjectName("d_file_no_lineEdit")
        self.label_28=QtWidgets.QLabel(self.tab_4)
        self.label_28.setGeometry(QtCore.QRect(660, 110, 111, 32))
        self.label_28.setObjectName("label_28")
        self.label_29=QtWidgets.QLabel(self.tab_4)
        self.label_29.setGeometry(QtCore.QRect(460, 110, 111, 32))
        self.label_29.setObjectName("label_29")
        self.d_book_no_lineEdit=QtWidgets.QLineEdit(self.tab_4)
        self.d_book_no_lineEdit.setGeometry(QtCore.QRect(430, 150, 181, 38))
        self.d_book_no_lineEdit.setText("")
        self.d_book_no_lineEdit.setObjectName("d_book_no_lineEdit")
        self.label_30=QtWidgets.QLabel(self.tab_4)
        self.label_30.setGeometry(QtCore.QRect(250, 110, 121, 32))
        self.label_30.setObjectName("label_30")
        self.d_page_no_lineEdit=QtWidgets.QLineEdit(self.tab_4)
        self.d_page_no_lineEdit.setGeometry(QtCore.QRect(230, 150, 181, 38))
        self.d_page_no_lineEdit.setObjectName("d_page_no_lineEdit")
        self.label_35=QtWidgets.QLabel(self.tab_4)
        self.label_35.setGeometry(QtCore.QRect(570, 220, 141, 32))
        self.label_35.setObjectName("label_35")
        self.label_36=QtWidgets.QLabel(self.tab_4)
        self.label_36.setGeometry(QtCore.QRect(280, 220, 151, 32))
        self.label_36.setObjectName("label_36")
        self.label_37=QtWidgets.QLabel(self.tab_4)
        self.label_37.setGeometry(QtCore.QRect(290, 320, 141, 32))
        self.label_37.setObjectName("label_37")



        self.label_38=QtWidgets.QLabel(self.tab_4)
        self.label_38.setGeometry(QtCore.QRect(600, 320, 111, 32))
        self.label_38.setObjectName("label_38")
        self.d_t_no_lineEdit2=QtWidgets.QLineEdit(self.tab_4)
        self.d_t_no_lineEdit2.setGeometry(QtCore.QRect(590, 360, 131, 38))
        self.d_t_no_lineEdit2.setObjectName("d_t_no_lineEdit2")
        self.label_39=QtWidgets.QLabel(self.tab_4)
        self.label_39.setGeometry(QtCore.QRect(710, 420, 201, 32))
        self.label_39.setObjectName("label_39")
        self.label_40=QtWidgets.QLabel(self.tab_4)
        self.label_40.setGeometry(QtCore.QRect(410, 40, 201, 32))
        self.label_40.setObjectName("label_40")
        self.d_keywords_textEdit=QtWidgets.QTextEdit(self.tab_4)
        self.d_keywords_textEdit.setGeometry(QtCore.QRect(860, 150, 256, 192))
        self.d_keywords_textEdit.setObjectName("d_keywords_textEdit")
        self.label_64=QtWidgets.QLabel(self.tab_4)
        self.label_64.setGeometry(QtCore.QRect(910, 110, 151, 32))
        self.label_64.setObjectName("label_64")


        self.d_t_place_lineEdit2=QtWidgets.QLineEdit(self.tab_4)
        self.d_t_place_lineEdit2.setGeometry(QtCore.QRect(200, 360, 321, 38))
        self.d_t_place_lineEdit2.setObjectName("d_t_place_lineEdit2")



        self.d_folder_path=QtWidgets.QLineEdit(self.tab_4)
        self.d_folder_path.setGeometry(QtCore.QRect(350, 530, 321, 38))
        self.d_folder_path.setObjectName("d_folder_path")


        self.label_path=QtWidgets.QLabel(self.tab_4)
        self.label_path.setGeometry(QtCore.QRect(700, 530, 121, 32))
        self.label_path.setObjectName("label_path")




        self.D_h_date_Edit2=QtWidgets.QDateEdit(self.tab_4)
        self.D_h_date_Edit2.setGeometry(QtCore.QRect(560, 260, 181, 42))
        self.D_h_date_Edit2.setObjectName("D_h_date_Edit2")
        self.D_m_date_Edit2=QtWidgets.QDateEdit(self.tab_4)
        self.D_m_date_Edit2.setGeometry(QtCore.QRect(260, 260, 181, 42))
        self.D_m_date_Edit2.setObjectName("D_m_date_Edit2")
        self.D_h_t_date_Edit2=QtWidgets.QDateEdit(self.tab_4)
        self.D_h_t_date_Edit2.setGeometry(QtCore.QRect(510, 420, 181, 42))
        self.D_h_t_date_Edit2.setObjectName("D_h_t_date_Edit2")
        self.d_no_lineEdit2=QtWidgets.QLineEdit(self.tab_4)
        self.d_no_lineEdit2.setGeometry(QtCore.QRect(890, 50, 181, 38))
        self.d_no_lineEdit2.setObjectName("d_no_lineEdit2")
        self.label_68=QtWidgets.QLabel(self.tab_4)
        self.label_68.setGeometry(QtCore.QRect(910, 10, 121, 32))
        self.label_68.setObjectName("label_68")
        self.d_save_Button=QtWidgets.QPushButton(self.tab_4)
        self.d_save_Button.setGeometry(QtCore.QRect(70, 140, 91, 48))
        self.d_save_Button.setObjectName("d_save_Button")
        self.D_m_t_date_Edit2=QtWidgets.QDateEdit(self.tab_4)
        self.D_m_t_date_Edit2.setGeometry(QtCore.QRect(80, 420, 181, 42))
        self.D_m_t_date_Edit2.setObjectName("D_m_t_date_Edit2")
        self.label_69=QtWidgets.QLabel(self.tab_4)
        self.label_69.setGeometry(QtCore.QRect(280, 420, 201, 32))
        self.label_69.setObjectName("label_69")
        self.d_t_no_lineEdit2_2=QtWidgets.QLineEdit(self.tab_4)
        self.d_t_no_lineEdit2_2.setGeometry(QtCore.QRect(40, 360, 131, 38))
        self.d_t_no_lineEdit2_2.setObjectName("d_t_no_lineEdit2_2")
        self.label_73=QtWidgets.QLabel(self.tab_4)
        self.label_73.setGeometry(QtCore.QRect(30, 320, 161, 32))
        self.label_73.setObjectName("label_73")
        self.tabWidget.addTab(self.tab_4, "")
        self.saveAllButton=QtWidgets.QPushButton(Widget)
        self.saveAllButton.setGeometry(QtCore.QRect(30, 20, 150, 48))
        self.saveAllButton.setObjectName("saveAllButton")
        self.saveAllButton_2=QtWidgets.QPushButton(Widget)
        self.saveAllButton_2.setGeometry(QtCore.QRect(200, 20, 150, 48))
        self.saveAllButton_2.setObjectName("saveAllButton_2")
        self.label_date_show=QtWidgets.QLabel(Widget)
        self.label_date_show.setGeometry(QtCore.QRect(400, 20, 150, 48))
        self.label_date_show.setObjectName("label_date_show")
        
        today_date_show=datetime.datetime.now()
        y= today_date_show.year
        m= today_date_show.month
        d= today_date_show.day
        show_hijri_date=str(Gregorian(y, m,d).to_hijri())
        self.label_date_show.setText(show_hijri_date)
       


        self.retranslateUi(Widget)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Widget)

        ################
       
       
        self.Scanner_Card_Button.clicked.connect(self.decoder_for_customers)
        self.saveAllButton_2.clicked.connect(self.save_all_data)
        self.saveAllButton.clicked.connect(self.save_word_file_data)
        
        self.sc_scanner_doc_pushButton.clicked.connect(self.decoder_for_doc)
        self.Add_Custom_Button.clicked.connect(self.add_cust)
        
        self.sd_add_pushButton.clicked.connect(self.add_sale_detiall)
        self.sc_add_pushButton.clicked.connect(self.add_connect)
        self.delete_Custom_Button.clicked.connect(self.delete_cust)
        self.sd_delete_pushButton.clicked.connect(self.delete_sd_table)
        self.sc_delete_pushButton.clicked.connect(self.delete_tableWidget_2)


        self.sd_price_n_lineEdit.textChanged.connect(self.sum_price)
        self.Sd_count_n_lineEdit.textChanged.connect(self.sum_price)
        
        self.Card_number_lineEdit.textChanged.connect(self.change_card_number)
        self.C_name_lineEdit.textChanged.connect(self.change_name)
        self.C_no_lineEdit.textChanged.connect(self.change_cust_no)
        
        customers_data=DatabaseClass.select_customers()       
        common_customers=QCompleter(customers_data)
        self.C_name_lineEdit.setCompleter(common_customers)
        self.c_name_lineEdit2.setCompleter(common_customers)
        self.c_name_lineEdit3.setCompleter(common_customers)
        self.d_t_place_lineEdit1.setCompleter(common_customers)
        self.d_t_place_lineEdit2.setCompleter(common_customers)
        x=datetime.datetime(1111, 5, 17)

        self.D_h_date_Edit2.setMinimumDate(x)
        self.card_date_Edit.setMinimumDate(x)
        self.D_hijri_date_Edit1.setMinimumDate(x)
        self.D_miladi_date_Edit1.setMinimumDate(x)

        self.D_h_t_date_Edit1.setMinimumDate(x)
        self.D_m_t_date_Edit1.setMinimumDate(x)
        self.D_m_date_Edit2.setMinimumDate(x)
        self.D_h_t_date_Edit2.setMinimumDate(x)
        self.D_m_t_date_Edit2.setMinimumDate(x)
        
        
        
   

    def retranslateUi(self, Widget):
        _translate=QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "Widget"))
        item=self.c_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Widget", "الصفة"))
        item=self.c_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Widget", "رقم العميل"))
        item=self.c_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Widget", "الاسم"))
        item=self.c_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Widget", "العنوان"))
        item=self.c_tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Widget", "النوع"))
        item=self.c_tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Widget", "نوع الهوية"))
        item=self.c_tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Widget", "رقم الهوية"))
        item=self.c_tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("Widget", "مكان الاصدار"))
        item=self.c_tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("Widget", "تأريخ الاصدار"))
        item=self.c_tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("Widget", "الحالة"))
        self.label_6.setText(_translate("Widget", "الصفة"))
        self.label.setText(_translate("Widget", "الاسم"))
        self.Scanner_Card_Button.setText(_translate("Widget", "قارئ الهوية"))
        self.label_3.setText(_translate("Widget", "رقم الهوية"))
        self.label_2.setText(_translate("Widget", "نوع الهوية"))
        self.label_4.setText(_translate("Widget", "مكان الاصدار"))
        self.label_5.setText(_translate("Widget", "تاريخ الاصدار"))
        self.card_type_comboBox.setItemText(0, _translate("Widget", "بطاقة شخصية"))
        self.card_type_comboBox.setItemText(1, _translate("Widget", "جواز سفر"))
        self.card_type_comboBox.setItemText(2, _translate("Widget", "رخصة قيادة"))
        self.card_type_comboBox.setItemText(3, _translate("Widget", "غير ذلك"))



        self.Add_Custom_Button.setToolTip(_translate("Widget", "اضافة بيانات طرف جديد"))
        self.Add_Custom_Button.setText(_translate("Widget", "اضافة طرف"))
        self.delete_Custom_Button.setText(_translate("Widget", "حذف"))

        self.label_11.setText(_translate("Widget", "النوع"))
        self.Scanner_face_Button.setText(_translate("Widget", "قارئ الوجه"))
        self.card_date_Edit.setDisplayFormat("dd/MM/yyyy")
        self.label_41.setText(_translate("Widget", "العنوان"))
        self.card_photo_1_label.setText(_translate("Widget", "صورة 1"))
        self.card_photo_2_label.setText(_translate("Widget", "صورة 2"))
        self.add_photo_Button.setText(_translate("Widget", "اضافة صورة"))
        self.label_59.setText(_translate("Widget", "رقم العميل"))
        self.c_photo_label.setText(_translate("Widget", "صورة 3"))
        self.C_saved_or_not_lineEdit.setToolTip(_translate("Widget", "حالة العميل هل هو عميل جديد 1 أو عميل قديم 2"))
        self.label_61.setText(_translate("Widget", "الحالة"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Widget", "بيانات الأطراف"))
        self.label_7.setText(_translate("Widget", "اسم الموضع"))
        self.label_8.setText(_translate("Widget", "عدد القصب رقما"))
        self.label_9.setText(_translate("Widget", "عدد القصب كتابة"))

        self.label_10.setText(_translate("Widget", "نوع القصب"))
        self.label_12.setText(_translate("Widget", "الضلع 1"))
        self.sd_shape_comboBox.setItemText(0, _translate("Widget", "مربع"))
        self.sd_shape_comboBox.setItemText(1, _translate("Widget", "مستطيل"))
        self.sd_shape_comboBox.setItemText(2, _translate("Widget", "مثلث"))
        self.sd_shape_comboBox.setItemText(3, _translate("Widget", "خماسي"))
        self.sd_shape_comboBox.setItemText(4, _translate("Widget", "معين"))
        self.sd_shape_comboBox.setItemText(5, _translate("Widget", "غير ذلك"))
        self.label_22.setText(_translate("Widget", "شكل الارضية"))
        self.label_23.setText(_translate("Widget", "الضلع 2"))
        self.label_24.setText(_translate("Widget", "الضلع 3"))
        self.label_25.setText(_translate("Widget", "اجمالي المساحة بالمتر"))
        self.label_26.setText(_translate("Widget", "الضلع 5"))
        self.label_27.setText(_translate("Widget", "الضلع 4"))
        self.label_31.setText(_translate("Widget", "الحد القبلي"))
        self.label_32.setText(_translate("Widget", "الحد العدني"))
        self.label_33.setText(_translate("Widget", "الحد الشرقي"))
        self.label_34.setText(_translate("Widget", "الحد الغربي"))
        item=self.sd_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Widget", "اسم الموضع"))
        item=self.sd_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Widget", "عدد القصب رقما"))
        item=self.sd_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Widget", "عدد القصب كتابة"))
        item=self.sd_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Widget", "نوع القصب"))
        item=self.sd_tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Widget", "شكل الارضية"))
        item=self.sd_tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Widget", "الضلع 1"))
        item=self.sd_tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Widget", "الضلع 2"))
        item=self.sd_tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("Widget", "الضلع 3"))
        item=self.sd_tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("Widget", "الضلع 4"))
        item=self.sd_tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("Widget", "الضلع 5"))
        item=self.sd_tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("Widget", "اجمالي المساحة بالمتر"))
        item=self.sd_tableWidget.horizontalHeaderItem(11)
        item.setText(_translate("Widget", "الحد القبلي"))
        item=self.sd_tableWidget.horizontalHeaderItem(12)
        item.setText(_translate("Widget", "الحد العدني"))
        item=self.sd_tableWidget.horizontalHeaderItem(13)
        item.setText(_translate("Widget", "الحد الشرقي"))
        item=self.sd_tableWidget.horizontalHeaderItem(14)
        item.setText(_translate("Widget", "الحد الغربي"))
        item=self.sd_tableWidget.horizontalHeaderItem(15)
        item.setText(_translate("Widget", "ثمن القصبة رقما"))
        item=self.sd_tableWidget.horizontalHeaderItem(16)
        item.setText(_translate("Widget", "ثمن القصبة كتابة"))
        item=self.sd_tableWidget.horizontalHeaderItem(17)
        item.setText(_translate("Widget", "اجمالي الثمن رقما"))
        item=self.sd_tableWidget.horizontalHeaderItem(18)
        item.setText(_translate("Widget", "اجمالي الثمن كتابة"))
        item=self.sd_tableWidget.horizontalHeaderItem(19)
        item.setText(_translate("Widget", "رقم الارضية"))        
        self.sd_save_pushButton.setToolTip(_translate("Widget", "حفظ جميع بيانات الأرضية"))
        self.sd_save_pushButton.setText(_translate("Widget", "حفظ"))
        self.sd_delete_pushButton.setToolTip(_translate("Widget", "حذف بيانات الأرضية"))
        self.sd_delete_pushButton.setText(_translate("Widget", "حذف"))
        self.label_47.setText(_translate("Widget", "اجمالي ثمن القصب رقما"))
        self.label_48.setText(_translate("Widget", "ثمن القصبة رقما"))
        self.label_49.setText(_translate("Widget", "الثمن الكلي كتابة"))
        self.label_50.setText(_translate("Widget", "ثمن القصبة كتابة"))
        self.label_51.setText(_translate("Widget", "الثمن الكلي رقما"))
        self.label_52.setText(_translate("Widget", "اجمالي ثمن القصب كتابة "))
        self.sd_add_pushButton.setToolTip(_translate("Widget", "اضافة بيانات ارضية جديدة"))
        self.sd_add_pushButton.setText(_translate("Widget", "اضافة"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Widget", "بيانات الأرضية"))
        self.c_name_lineEdit2.setToolTip(_translate("Widget", "البائع الاول - المورث - الواهب"))
        self.label_13.setText(_translate("Widget", "بتأريخ هجري"))
        self.label_15.setText(_translate("Widget", "البائع الاول"))
        item=self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("Widget", "رقم الوثيقة"))
        item=self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("Widget", "حالة الوثيقة"))
        item=self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("Widget", "رقم البائع"))
        item=self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("Widget", "اسم البائع"))
        item=self.tableWidget_2.horizontalHeaderItem(4)
        item.setText(_translate("Widget", "نوع الاتصال"))
        item=self.tableWidget_2.horizontalHeaderItem(5)
        item.setText(_translate("Widget", "رقم البائع الاول"))
        item=self.tableWidget_2.horizontalHeaderItem(6)
        item.setText(_translate("Widget", "اسم البائع الاول"))
        item=self.tableWidget_2.horizontalHeaderItem(7)
        item.setText(_translate("Widget", "حالة البائع الاول"))
        item=self.tableWidget_2.horizontalHeaderItem(8)
        item.setText(_translate("Widget", "رقم الامين"))
        item=self.tableWidget_2.horizontalHeaderItem(9)
        item.setText(_translate("Widget", "اسم الامين"))
        item=self.tableWidget_2.horizontalHeaderItem(10)
        item.setText(_translate("Widget", "حالة الامين"))
        item=self.tableWidget_2.horizontalHeaderItem(11)
        item.setText(_translate("Widget", "بتأريخ هجري"))
        item=self.tableWidget_2.horizontalHeaderItem(12)
        item.setText(_translate("Widget", "بتأريخ ميلادي"))
        item=self.tableWidget_2.horizontalHeaderItem(13)
        item.setText(_translate("Widget", "رقم مكان التعميد"))
        item=self.tableWidget_2.horizontalHeaderItem(14)
        item.setText(_translate("Widget", "اسم مكان التعميد"))
        item=self.tableWidget_2.horizontalHeaderItem(15)
        item.setText(_translate("Widget", "حالة مكان التعميد"))
        item=self.tableWidget_2.horizontalHeaderItem(16)
        item.setText(_translate("Widget", "تاريخ التعميد هجري"))
        item=self.tableWidget_2.horizontalHeaderItem(17)
        item.setText(_translate("Widget", "تاريخ التعميد ميلادي"))
        item=self.tableWidget_2.horizontalHeaderItem(18)
        item.setText(_translate("Widget", "رقم التعميد"))

        item=self.tableWidget_2.horizontalHeaderItem(19)
        item.setText(_translate("Widget", "نوع الوثيقة"))

        self.label_17.setText(_translate("Widget", "نوع الاتصال"))
        self.label_18.setText(_translate("Widget", "مكان التعميد"))
        self.label_19.setText(_translate("Widget", "بيانات الاتصال للبائع"))
        self.label_16.setText(_translate("Widget", "بخط الامين"))
        self.label_20.setText(_translate("Widget", "رقم التعميد"))
        self.label_21.setText(_translate("Widget", "البائع"))
        self.seller_comboBox.setToolTip(_translate("Widget", "اختيار البائع"))
        self.sc_delete_pushButton.setText(_translate("Widget", "حذف"))
        self.sc_scanner_doc_pushButton.setText(_translate("Widget", "قارئ الوثيقة"))
        self.sc_add_pushButton.setText(_translate("Widget", "اضافة"))
        self.D_saved_or_not_lineEdit1.setToolTip(_translate("Widget", "حالة العميل هل هو عميل جديد 1 أو عميل قديم 2"))
        self.label_62.setText(_translate("Widget", "الحالة"))
        self.label_42.setText(_translate("Widget", "بتأريخ ميلادي"))
        self.D_hijri_date_Edit1.setDisplayFormat(_translate("Widget", "dd/MM/yyyy"))
        self.D_miladi_date_Edit1.setDisplayFormat(_translate("Widget", "dd/MM/yyyy"))
      
      
        self.d_no_lineEdit1.setToolTip(_translate("Widget", "البحث عبر رقم الوثيقة"))
        self.label_65.setText(_translate("Widget", "رقم الوثيقة"))
        self.label_14.setText(_translate("Widget", "بتأريخ هجري"))
        self.D_m_t_date_Edit1.setDisplayFormat(_translate("Widget", "dd/MM/yyyy"))
        self.label_45.setText(_translate("Widget", "بتأريخ ميلادي"))
        self.D_h_t_date_Edit1.setDisplayFormat(_translate("Widget", "dd/MM/yyyy"))
        self.sc_save_pushButton.setText(_translate("Widget", "حفظ"))
        self.c_no_lineEdit_4.setToolTip(_translate("Widget", "رقم البائع الاول - المورث .....الخ"))
        self.label_70.setText(_translate("Widget", "رقم البائع الاول"))
        self.c_no_lineEdit_5.setToolTip(_translate("Widget", "البحث عن الامين عبر رقم الامين"))
        self.label_71.setText(_translate("Widget", "رقم الامين"))
        self.label_72.setText(_translate("Widget", "رقم مكان التعميد"))
        self.c_no_lineEdit_6.setToolTip(_translate("Widget", "البحث عن مكان التعميد"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Widget", "بيانات الإتصال"))
        self.label_28.setText(_translate("Widget", "رقم الملف"))
        self.label_29.setText(_translate("Widget", "رقم الدفتر"))
        self.label_30.setText(_translate("Widget", "رقم الصفحة"))
        self.label_35.setText(_translate("Widget", "التأريخ الهجري"))
        self.label_36.setText(_translate("Widget", "التأريخ الميلادي"))
        self.label_37.setText(_translate("Widget", "مكان التعميد"))
        self.label_38.setText(_translate("Widget", "رقم التعميد"))
        self.label_39.setText(_translate("Widget", "تأريخ التعميد هجري"))
        self.label_40.setText(_translate("Widget", "اضافة بيانات الوثيقة"))
        self.label_64.setText(_translate("Widget", "كلمات مفتاحية"))
        self.D_h_date_Edit2.setDisplayFormat(_translate("Widget", "dd/MM/yyyy"))
        self.D_m_date_Edit2.setDisplayFormat(_translate("Widget", "dd/MM/yyyy"))
        self.D_h_t_date_Edit2.setDisplayFormat(_translate("Widget", "dd/MM/yyyy"))
        self.label_68.setText(_translate("Widget", "رقم الوثيقة"))
        self.d_save_Button.setText(_translate("Widget", "حفظ"))
        self.D_m_t_date_Edit2.setDisplayFormat(_translate("Widget", "dd/MM/yyyy"))
        self.label_69.setText(_translate("Widget", "تأريخ التعميد ميلادي"))
        self.d_t_no_lineEdit2_2.setToolTip(_translate("Widget", "للبحث فقط"))
        self.label_73.setText(_translate("Widget", "رقم مكان التعميد"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("Widget", "بيانات الوثيقة"))
        self.saveAllButton.setToolTip(_translate("Widget", "حفظ البيانات في النظام"))
        self.saveAllButton.setText(_translate("Widget", "حفظ"))
        self.saveAllButton_2.setToolTip(_translate("Widget", "انشاء ملف ورد بالبيانات المذكورة وحفظها في النظام"))
        self.saveAllButton_2.setText(_translate("Widget", "انشاء"))




######################################################
    
    def change_card_number(self):
        check_change=self.change_no_or_name_or_card_number.text()
        if check_change=="" or check_change=="1" or check_change=="4":

            card_number_ch=self.Card_number_lineEdit.text()
            if len(card_number_ch)>5:
                self.change_no_or_name_or_card_number.setText("4")
                self.cust_data_by_card_number(card_number_ch)





    def change_name(self):

        check_change=self.change_no_or_name_or_card_number.text()

        if check_change=="" or check_change=="1" or check_change=="3":

            name=self.C_name_lineEdit.text()
            if len(name)>10:
                self.change_no_or_name_or_card_number.setText("3")
                self.cust_data_by_name()
    
    def change_cust_no(self):

        check_change=self.change_no_or_name_or_card_number.text()
        if check_change=="" or check_change=="1" or check_change=="2":
            if self.C_no_lineEdit.text()!="":
                self.change_no_or_name_or_card_number.setText("2")
                self.cust_data_by_c_no()
        
    def save_word_file_data(self):
        d_no = self.d_no_lineEdit2.text()
        folder_path = self.d_folder_path.text()
        file_path = folder_path+'\\word_file.docx'  # استبدل هذا بمسار ملف الوورد الخاص بك
        full_text = sumFun.read_word_file(file_path)
        DatabaseClass.update_docum_table_add_full_text(full_text, d_no)

    def save_all_data(self):


        max_d_no_my_resulte=DatabaseClass.select_max_d_no_from_docum()
        docum_no=sumFun.text_to_number(max_d_no_my_resulte[0][0]) + 1
        self.d_no_lineEdit2.setText(str(docum_no)) 

        today_date=datetime.datetime.now()
        y= today_date.year
        m= today_date.month
        d= today_date.day

        D_hijri_date=self.D_h_date_Edit2.date().toPyDate()
        D_miladi_date=self.D_m_date_Edit2.date().toPyDate()
        D_hijri_input_date=Gregorian(y, m,d).to_hijri()
        D_miladi_input_date=today_date
        if D_hijri_date==D_miladi_date:
            D_hijri_date=D_hijri_input_date
            D_miladi_date=D_miladi_input_date

        

        D_file_no=self.d_file_no_lineEdit.text()
        D_manual_archiving_no="0"
        D_electronic_type="0"
        D_old_no="0"
        D_bsaieer_or_zowg="0"
        D_old_input_date='2000-11-17'
        d_book_no=self.d_book_no_lineEdit.text()
        d_page_no=self.d_page_no_lineEdit.text()
        D_type="1"
        D_m_type="0"
        D_z_type="0"
        D_h_t_date=str(self.D_h_t_date_Edit2.date().toPyDate())
        D_m_t_date=str(self.D_m_t_date_Edit2.date().toPyDate())
        D_t_number=self.d_t_no_lineEdit2.text()
        D_full_text="0"
        D_qrcode="E_Archiving_No"+self.d_no_lineEdit2.text()+"Y"+str(y)+"M"+str(m)+"D"+str(d)
        D_printed_no="0"
        d_note="0"
        D_Keywords=self.d_keywords_textEdit.toPlainText()
        D_All_price_n=self.all_price_n_lineEdit.text()
        D_All_price_k=self.all_price_k_lineEdit.text()

        C_no_1="1" #########
        C_no_2="0" #########
       

        buyers_names,sellers_names,buyer_agent,seller_agent,buyer_identifier,seller_identifier,the_appraiser_name,witness_name="","","","","","","",""
        check_buyers_acount,check_sellers_acount,check_buyer_identifier,check_seller_identifier=0,0,0,0
        count_of_row=self.c_tableWidget.rowCount()
        
        for x in range(count_of_row):
            cd_type=str(CheckClass.cust_type_check(self.c_tableWidget.item(x,0).text()))
            customer_no=str(self.c_tableWidget.item(x,1).text())
            DatabaseClass.insert_into_cust_doc_table(customer_no,str(docum_no),cd_type,'','','','','','')
            
            
            name=self.c_tableWidget.item(x,2).text()
            
            address=str(self.c_tableWidget.item(x,3).text())
            
            card_type=str(self.c_tableWidget.item(x,5).text())
            card_number=str(self.c_tableWidget.item(x,6).text())
            card_place=str(self.c_tableWidget.item(x,7).text())
            card_date=str(self.c_tableWidget.item(x,8).text())

            if cd_type=="1":
                if check_buyers_acount==0:
                    buyers_names+=" "+name+" من اهالي "+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+"م "
                    check_buyers_acount+=1
                else:
                    buyers_names+="و"+name+" من اهالي "+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+"م "
                    check_buyers_acount+=1

            if cd_type=="2":
                if check_sellers_acount==0:
                    sellers_names+=" "+name+" من اهالي "+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+"م "
                    check_sellers_acount+=1
                else:
                    sellers_names+="و"+name+" من اهالي "+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+"م "
                    check_sellers_acount+=1
                
            
            
            if cd_type=="3":
                buyer_agent+=" "+name+" من اهالي "+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+" م "

            if cd_type=="4":
                seller_agent+=" "+name+" من اهالي "+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+" م "
                
            
 
            if cd_type=="5":
                if check_buyer_identifier==0:
                    buyer_identifier+=" "+name+" من اهالي "+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+" م "
                    check_buyer_identifier+=1
                else:
                    buyer_identifier+=" و "+name+" من اهالي"+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+" م "
                    check_buyer_identifier+=1

            
            if cd_type=="6":
                if check_seller_identifier==0:
                    seller_identifier+=" "+name+" من اهالي"+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+" م "
                    check_seller_identifier+=1
                else:
                    seller_identifier+=" و "+name+" من اهالي"+address+" يحمل "+card_type+" رقم "+card_number+" صادرة من "+card_place+" بتأريخ "+card_date+" م "
                    check_seller_identifier+=1

            if cd_type=="7":
                the_appraiser_name+=" "+name

            if cd_type=="8":
                witness_name+=" "+name
                   

        
        sd_count_of_row=self.sd_tableWidget.rowCount()
        sd_table=""
        check_sd_count=0
        for x in range(sd_count_of_row):
            sd_no=str(self.sd_tableWidget.item(x,19).text())
            DatabaseClass.insert_into_doc_detaills_connect_table(str(docum_no),sd_no)
   
            sd_name=str(self.sd_tableWidget.item(x,0).text())
            Sd_count_n=str(self.sd_tableWidget.item(x,1).text())
            Sd_count_k=str(self.sd_tableWidget.item(x,2).text())
            sd_type=str(self.sd_tableWidget.item(x,3).text()) 
            sd_shape=str(self.sd_tableWidget.item(x,4).text())
            sd_a1=str(self.sd_tableWidget.item(x,5).text())
            sd_a2=str(self.sd_tableWidget.item(x,6).text())
            sd_a3=str(self.sd_tableWidget.item(x,7).text())
            sd_a4=str(self.sd_tableWidget.item(x,8).text())
            sd_a5=str(self.sd_tableWidget.item(x,9).text())
            sd_area=str(self.sd_tableWidget.item(x,10).text())
            sd_h1=str(self.sd_tableWidget.item(x,11).text())
            sd_h2=str(self.sd_tableWidget.item(x,12).text())
            sd_h3=str(self.sd_tableWidget.item(x,13).text())
            sd_h4=str(self.sd_tableWidget.item(x,14).text())
            sd_price_n=str(self.sd_tableWidget.item(x,15).text())
            sd_price_k=str(self.sd_tableWidget.item(x,16).text())
            sd_total=str(self.sd_tableWidget.item(x,17).text())
            sd_total_k=str(self.sd_tableWidget.item(x,18).text())

            if check_sd_count==0:
                sd_table+=" "
                check_sd_count+=1
            else:
                sd_table+=" وكذلك "
                check_sd_count+=1

            if Sd_count_n!="":
                sd_table+=" "+Sd_count_n

            if Sd_count_k!="":
                sd_table+=" "+Sd_count_k

            if sd_type!="":
                sd_table+=" "+sd_type

            if sd_name!="":
                sd_table+=" في موضع "+sd_name


            if sd_h1!="":
                sd_table+=" وحدود ذلك المبيع قبليا "+sd_h1
            if sd_h2!="":
                sd_table+=" عدنيا "+sd_h2
                    
            if sd_h3!="":
                sd_table+=" شرقيا "+sd_h3
            if sd_h4!="":
                sd_table+=" غربيا "+sd_h4
                    

            if sd_a1!="":
                sd_table+=" ومساحة اضلاع المبيع الضلع القبلي "+sd_a1+"م "
            if sd_a2!="":
                sd_table+="الضلع العدني "+sd_a2+"م "

            if sd_a3!="":
                sd_table+="الضلع الشرقي "+sd_a3+"م "
            if sd_a4!="":
                sd_table+="الضلع الغربي "+sd_a4+"م "

        
        sc_count_of_row=self.tableWidget_2.rowCount()
        sc_table=""
        agency_doc=""
        for x in range(sc_count_of_row):
            firest_d_no=str(self.tableWidget_2.item(x,0).text())
            DatabaseClass.insert_into_sales_contact_table(firest_d_no,str(docum_no),'','')
            firest_name=str(self.tableWidget_2.item(x,6).text())
            clerk_name=str(self.tableWidget_2.item(x,9).text())
            doc_hijri_date=str(self.tableWidget_2.item(x,11).text())
            doc_miladi_date=str(self.tableWidget_2.item(x,12).text())
            d_t_place=str(self.tableWidget_2.item(x,14).text())
            d_t_h_date=str(self.tableWidget_2.item(x,16).text())
            d_t_m_date=str(self.tableWidget_2.item(x,17).text())
            d_t_number=str(self.tableWidget_2.item(x,18).text())
            doc_type_c_v=str(self.tableWidget_2.item(x,19).text())
            if doc_type_c_v=="وكالة مبيع":
                agency_doc+=" بموجب وكالة شرعية محررة"

            
                if clerk_name=="":
                    agency_doc+=" بخطنا"
                else:
                    agency_doc+=" بخط الأمين "+clerk_name
            
                agency_doc+=" بتأريخ "+doc_hijri_date+" هـ "
                agency_doc+=" الموافق "+doc_miladi_date+" م "
                agency_doc+=" معمدة في "+d_t_place
                agency_doc+=" بتاريخ "+d_t_h_date+" هـ "
                agency_doc+=" الموافق "+d_t_m_date+" م "
                if d_t_number!="":
                    agency_doc+=" برقم "+d_t_number


            else:
                if x>0:
                    sc_table+=" و"
            
                sc_table+=" "+doc_type_c_v
                sc_table+=" من "+firest_name

                if doc_type_c_v=="شراء":
                    sc_table+=" بموجب بصيرة شرعية محررة"
                
                elif doc_type_c_v=="ارث":
                    sc_table+=" بموجب فرز محرر"
                else:
                    sc_table+=" بموجب حجة شرعية محررة"

            
                if clerk_name=="":
                    sc_table+=" بخطنا"
                else:
                    sc_table+=" بخط الأمين "+clerk_name
            
                sc_table+=" بتأريخ "+doc_hijri_date+" هـ "
                sc_table+=" الموافق "+doc_miladi_date+" م "
                sc_table+=" معمدة في "+d_t_place
                sc_table+=" بتاريخ "+d_t_h_date+" هـ "
                sc_table+=" الموافق "+d_t_m_date+" م "
                if d_t_number!="":
                    sc_table+=" برقم "+d_t_number


        

        
        current_Hijri_date=Gregorian(y, m,d).to_hijri()
        current_Hijri_year=str(current_Hijri_date.year)
        current_Hijri_month=str(current_Hijri_date.month)
        current_Hijri_day=str(current_Hijri_date.day)

        current_path=os.getcwd()
        current_path += "\\documents_folders\\"+current_Hijri_year+"\\"+current_Hijri_month+"\\"+current_Hijri_day
        doc_folder=current_path+"\\"+str(docum_no)
        os.mkdir(doc_folder) #انشاء مجلد خاص بهذه الوثيقة 
        
        DatabaseClass.insert_into_docum_table(str(D_hijri_date), str(D_miladi_date), str(D_hijri_input_date), str(D_miladi_input_date), D_file_no, D_manual_archiving_no, D_electronic_type, D_old_no, D_bsaieer_or_zowg, D_old_input_date, d_book_no, d_page_no, D_type, D_m_type, D_z_type, D_h_t_date, D_m_t_date, D_t_number, D_full_text, D_qrcode, D_printed_no, d_note, D_Keywords, D_All_price_n, D_All_price_k, C_no_1, C_no_2,doc_folder)
        
        D_hijri_date=datetime.datetime(D_hijri_date.year, D_hijri_date.month, D_hijri_date.day).strftime('%d/%m/%Y')
        D_miladi_date=D_miladi_date.strftime('%d/%m/%Y')
        #today_date=today_date.strftime('%d/%m/%Y')
        #print(today_date)

        docum_full_text = full_doc_text.sale_full_text(buyers_names,check_buyers_acount,sellers_names,check_sellers_acount,buyer_agent,seller_agent,buyer_identifier,seller_identifier,the_appraiser_name,witness_name,sd_table,sc_table,docum_no,str(today_date),str(D_hijri_date),str(D_miladi_date),str(D_hijri_input_date),str(D_miladi_input_date),D_file_no,d_book_no,d_page_no,D_All_price_n,D_All_price_k,agency_doc)
 
        png_path_and_name = doc_folder+"\\qrcodeimage.png"

        create_qr_code_for_doc = pyqrcode.create(D_qrcode)
        # Create and save the png file naming "myqr.png"
        create_qr_code_for_doc.png(png_path_and_name, scale=6)
        word_file_path = doc_folder + "\\word_file.docx"
        create_word_file.fetch(word_file_path,docum_full_text,png_path_and_name)
        #dd=os.system("cd "+doc_folder)
        self.d_folder_path.setText(doc_folder)
        
        







    def save_docum_data_for_connect(self):
        
        docum_myresult=DatabaseClass.select_max_d_no_from_docum()
        docum_no=sumFun.text_to_number(docum_myresult[0][0]) + 1
        self.d_no_lineEdit1.setText(str(docum_no))
        today_date=datetime.datetime.now()
        y= today_date.year
        m= today_date.month
        d= today_date.day
        D_hijri_date=str(self.D_hijri_date_Edit1.date().toPyDate())
        D_miladi_date=str(self.D_miladi_date_Edit1.date().toPyDate())
        D_hijri_input_date=str(Gregorian(y, m,d).to_hijri())
        D_miladi_input_date=str(today_date)
        D_file_no='0'
        D_manual_archiving_no='0'
        D_electronic_type='0'
        D_old_no='0'
        D_bsaieer_or_zowg='0'
        D_old_input_date='2000-11-17'
        d_book_no='0'
        d_page_no='0'
        D_type=str(self.doc_type_comboBox.currentData())
        D_m_type='0'
        D_z_type='0'
        D_h_t_date=str(self.D_h_t_date_Edit1.date().toPyDate())
        D_m_t_date=str(self.D_m_t_date_Edit1.date().toPyDate())
        D_t_number=self.d_t_no_lineEdit1.text()
        D_full_text="0"

        
        D_qrcode="E_Archiving_No"+self.d_no_lineEdit1.text()+"Y"+str(y)+"M"+str(m)+"D"+str(d)
        
        D_printed_no='0'
        d_note='0'
        D_Keywords='0'
        D_All_price_n='0' #########
        D_All_price_k='0' #########

        C_no_1=self.c_no_lineEdit_5.text() #########
          
        C_no_2=self.c_no_lineEdit_6.text() #########
        seller_c_no=str(self.seller_comboBox.currentData())
        firest_seller_c_no=self.c_no_lineEdit_4.text()
        
        current_Hijri_date=Gregorian(y, m,d).to_hijri()
        current_Hijri_year=str(current_Hijri_date.year)
        current_Hijri_month=str(current_Hijri_date.month)
        current_Hijri_day=str(current_Hijri_date.day)

        current_path=os.getcwd()
        current_path += "\\documents_folders\\"+current_Hijri_year+"\\"+current_Hijri_month+"\\"+current_Hijri_day
        doc_folder=current_path+"\\"+str(docum_no)
        os.mkdir(doc_folder) #انشاء مجلد خاص بهذه الوثيقة 
        

        DatabaseClass.insert_into_docum_table(D_hijri_date, D_miladi_date, D_hijri_input_date, D_miladi_input_date, D_file_no, D_manual_archiving_no, D_electronic_type, D_old_no, D_bsaieer_or_zowg, D_old_input_date, d_book_no, d_page_no, D_type, D_m_type, D_z_type, D_h_t_date, D_m_t_date, D_t_number, D_full_text, D_qrcode, D_printed_no, d_note, D_Keywords, D_All_price_n, D_All_price_k, C_no_1, C_no_2,'')
        DatabaseClass.insert_into_cust_doc_table(seller_c_no,str(sumFun.text_to_number(docum_myresult[0][0]) + 1), 1,'','','','','','')
        DatabaseClass.insert_into_cust_doc_table(firest_seller_c_no,str(sumFun.text_to_number(docum_myresult[0][0]) + 1),2,'','','','','','')

        
        png_path_and_name=doc_folder+"\\qrcodeimage.png"

        create_qr_code_for_doc=pyqrcode.create(D_qrcode)
        # Create and save the png file naming "myqr.png"
        create_qr_code_for_doc.png(png_path_and_name, scale=6)
        word_file_path=doc_folder+"\\word_file.docx"
        create_word_file.fetch(word_file_path," بدون محتوى ",png_path_and_name)
        #dd=os.system("cd "+doc_folder)


    def cust_data_by_name(self):
       
        
        name=self.C_name_lineEdit.text()
        counter,myresulte=DatabaseClass.check_customers_saved(name)
        if counter==0:
            self.C_saved_or_not_lineEdit.setText("2")
        else:
            
            c_no=myresulte[0][0]
            c_name=myresulte[0][1]
            c_address=myresulte[0][2]
            c_type=myresulte[0][4]
            
             
            id_counter,id_table_data=DatabaseClass.select_id_table(c_no)

           
            id_card_type=1
            id_card_number='0'
            id_card_place='0'
            id_card_issue_date=datetime.datetime(2000, 1, 1)

            
            if id_counter!=0:
                last_row_index=id_counter-1

                id_card_type=id_table_data[last_row_index][1]
                id_card_number=id_table_data[last_row_index][2]
                id_card_place=id_table_data[last_row_index][3]
                id_card_issue_date=id_table_data[last_row_index][4]

 
            self.c_maleOrFemale_comboBox.setCurrentIndex(c_type-1)
            self.card_type_comboBox.setCurrentIndex((id_card_type-1))

            
            self.C_name_lineEdit.setText(c_name)
            self.C_no_lineEdit.setText(str(c_no))
            self.C_address_lineEdit.setText(c_address)
            
            self.Card_number_lineEdit.setText(id_card_number)
            self.Card_place_lineEdit.setText(id_card_place)
            self.card_date_Edit.setDate(id_card_issue_date)
            self.C_saved_or_not_lineEdit.setText("1")
           


    def cust_data_by_c_no(self):
       
        
        c_no=self.C_no_lineEdit.text()
        counter,myresulte=DatabaseClass.check_customers_saved_by_c_no(c_no)
        if counter==0:
            self.C_saved_or_not_lineEdit.setText("2")
        else:
            
            
            c_name=myresulte[0][1]
            c_address=myresulte[0][2]
            c_type=myresulte[0][4]

            id_counter,id_table_data=DatabaseClass.select_id_table(c_no)
            
            id_card_type=1
            id_card_number='0'
            id_card_place='0'
            id_card_issue_date=datetime.datetime(2000, 1, 1)

            
            if id_counter!=0:
                last_row_index=id_counter-1
                id_card_type=id_table_data[last_row_index][1]
                id_card_number=id_table_data[last_row_index][2]
                id_card_place=id_table_data[last_row_index][3]
                id_card_issue_date=id_table_data[last_row_index][4]


            self.c_maleOrFemale_comboBox.setCurrentIndex(c_type-1)
            self.card_type_comboBox.setCurrentIndex((id_card_type-1))

            
            self.C_name_lineEdit.setText(c_name)
            
            self.C_address_lineEdit.setText(c_address)
            
            self.Card_number_lineEdit.setText(id_card_number)
            self.Card_place_lineEdit.setText(id_card_place)
            self.card_date_Edit.setDate(id_card_issue_date)
            self.C_saved_or_not_lineEdit.setText("1")
           




    def cust_data_by_card_number(self,card_number):

        self.Card_number_lineEdit.setText(card_number)
        counter,myresult_id_table=DatabaseClass.select_id_table_with_card_number(card_number)
        
        if counter!=0:
            counter,myresulte_cust_table=DatabaseClass.select_customers_by_c_no(myresult_id_table[0][10])
            c_no=str(myresulte_cust_table[0][0])
            c_name=str(myresulte_cust_table[0][1])
            c_address=str(myresulte_cust_table[0][2])
            c_type=myresulte_cust_table[0][4]
            
            self.c_maleOrFemale_comboBox.setCurrentIndex(c_type-1)
            
            
            
            
            card_type=myresult_id_table[0][1]
            self.card_type_comboBox.setCurrentIndex((card_type-1))

            card_number=str(myresult_id_table[0][2])
            card_place=str(myresult_id_table[0][3])
            card_date=myresult_id_table[0][4]

            
            self.C_name_lineEdit.setText(c_name)
            self.C_no_lineEdit.setText(c_no)
            self.C_address_lineEdit.setText(c_address)
            
            self.Card_number_lineEdit.setText(card_number)
            self.Card_place_lineEdit.setText(card_place)
            self.card_date_Edit.setDate(card_date)
            self.C_saved_or_not_lineEdit.setText("1")
        else:
            self.C_saved_or_not_lineEdit.setText("2")   




    def doc_data_by_qr_code(self,qr_code):
        counter_doc,myresult_doc_table=DatabaseClass.select_doc_by_qr_code(qr_code)
        if counter_doc==0:
            
            self.D_connect_save_or_not.setText("2")  #القيمة 2 في حقل الحالة يدل على انها وثيقة جديدة وغير محفوظة في النظام
        else:
            d_no=myresult_doc_table[0][0]
            D_hijri_date=myresult_doc_table[0][1]
            D_miladi_date=myresult_doc_table[0][2]
            D_type=myresult_doc_table[0][13]
            D_h_t_date=myresult_doc_table[0][16]
            D_m_t_date=myresult_doc_table[0][17]
         
            
            d_t_no=myresult_doc_table[0][18]
            #seller_c_no="0"  #رقم البائع 
            firest_seller_c_no=0   #رقم البائع الاول
            firest_seller_c_name=""
            counter_cust_doc,myresult_cust_doc_table=DatabaseClass.select_cust_doc_table_by_d_no(d_no)
            if counter_cust_doc!=0:
                firest_seller_c_no=myresult_cust_doc_table[0][1]
                counter_firest_seller,myresulte_firest_seller=DatabaseClass.check_customers_saved_by_c_no(firest_seller_c_no)
                firest_seller_c_name=myresulte_firest_seller[0][1]
            
            
            clerk_c_no=myresult_doc_table[0][26]   #رقم الامين
            counter_clerk,myresulte_clerk=DatabaseClass.check_customers_saved_by_c_no(clerk_c_no)
            clerk_c_name = ''
            if counter_clerk != 0:
                clerk_c_name=myresulte_clerk[0][1]

            court_c_no=myresult_doc_table[0][27]    #رقم المحكمة

            counter_court,myresulte_court=DatabaseClass.check_customers_saved_by_c_no(court_c_no)
            court_c_name = ''
            if counter_court != 0:
                court_c_name=myresulte_court[0][1]
            
             
            self.doc_type_comboBox.setCurrentIndex((D_type-1))
            self.c_no_lineEdit_4.setText(str(firest_seller_c_no))
            self.c_name_lineEdit2.setText(firest_seller_c_name)
            self.c_no_lineEdit_5.setText(str(clerk_c_no))
            self.c_name_lineEdit3.setText(clerk_c_name)
            self.c_no_lineEdit_6.setText(str(court_c_no))
            self.d_t_place_lineEdit1.setText(court_c_name)  
            self.d_t_no_lineEdit1.setText(str(d_t_no))
            self.d_no_lineEdit1.setText(str(d_no))

            self.D_hijri_date_Edit1.setDate(D_hijri_date)
            self.D_miladi_date_Edit1.setDate(D_miladi_date)
            self.D_h_t_date_Edit1.setDate(D_h_t_date)
            self.D_m_t_date_Edit1.setDate(D_m_t_date)
            self.D_connect_save_or_not.setText("1")   #القيمة 1 هنا تدل على ان هذه الوثيقة محفوظة في النظام 










    def decoder_for_customers(self):
        self.decoder(1)


    def decoder_for_doc(self):
        self.decoder(2)

    def decoder(self,decoder_type):
        cap=cv2.VideoCapture(0)
        while True:
            counter=1
            ret, frame=cap.read()
        
            gray_img=cv2.cvtColor(frame,0)
            barcode=decode(gray_img)
    
            for obj in barcode:
                points=obj.polygon
                (x,y,w,h)=obj.rect
                pts=np.array(points, np.int32)
                pts=pts.reshape((-1, 1, 2))
                cv2.polylines(frame, [pts], True, (0, 255, 0), 3)

                barcodeData=obj.data.decode("utf-8")
                barcodeType=obj.type
                #print("Barcode: "+barcodeData +" | Type: "+barcodeType)
                yy=str(barcodeData)
                counter=2
                
            
            
            cv2.imshow('Image', frame)
            code=cv2.waitKey(10)
            if code == ord('q'):
                if decoder_type==1:
                   self.cust_data_by_card_number(yy)
                if decoder_type==2:
                   self.D_connect_qrcode.setText(yy)
                   self.doc_data_by_qr_code(yy)
                
                break
            
            if counter==2:
                if decoder_type==1:
                   self.cust_data_by_card_number(yy)
                if decoder_type==2:
                   self.D_connect_qrcode.setText(yy)
                   self.doc_data_by_qr_code(yy)
                break

    def add_cust_to_table(self):


        
        custtype=str(self.Cd_Type_comboBox.currentData())
       

        
        c_no=self.C_no_lineEdit.text()
        if c_no!="":
            check_cust,myresultcust=DatabaseClass.select_customers_by_c_no(c_no)
            if check_cust==0:
                self.C_saved_or_not_lineEdit.setText("2")
            else:
                self.C_saved_or_not_lineEdit.setText("1")

        else:
            self.C_saved_or_not_lineEdit.setText("2")


        name=self.C_name_lineEdit.text()
        card_type='1'
        card_number=self.Card_number_lineEdit.text()
        if card_number=="":
            card_number="0"

        card_place=self.Card_place_lineEdit.text()
        card_issue_date=str(self.card_date_Edit.date().toPyDate())
        custMaleOrFemale='1'
        address=self.C_address_lineEdit.text()

        pirth_date='2000-11-17'

        card_type=self.card_type_comboBox.currentData()
        card_end_date=CheckClass.check_card_date(card_type,self.card_date_Edit.date().toPyDate())
        
        custMaleOrFemale=str(CheckClass.cust_type_check(self.c_maleOrFemale_comboBox.currentText()))
       
        if  self.C_saved_or_not_lineEdit.text()!="1":
            myresult=DatabaseClass.select_max_c_no()
            c_no=str((sumFun.text_to_number(myresult[0][0])) + 1)
            DatabaseClass.insertintocustomers_table(name,address,pirth_date,custMaleOrFemale,1," not found data "," not found data ",1)
            DatabaseClass.insert_into_id_table(card_type,card_number,card_place,card_issue_date,card_end_date,c_no," the note "," the keywords ")
            path_c = os.getcwd()
            path_c += "\\customers_folders\\" + c_no
            os.mkdir(path_c)
        else:
            c_no=self.C_no_lineEdit.text()
            if card_number!="0":
                card_counter,card_myresult_id_table=DatabaseClass.select_id_table_with_card_number(card_number)
                if card_counter==0:
                     DatabaseClass.insert_into_id_table(card_type,card_number,card_place,card_issue_date,card_end_date,c_no," the note "," the keywords ")
 

    

        card_issue_date=self.card_date_Edit.date().toPyDate()
        card_issue_date=str(card_issue_date.strftime('%d/%m/%Y'))


        row=self.c_tableWidget.rowCount()
        self.c_tableWidget.insertRow(row)
        self.c_tableWidget.setItem(row, 0, QTableWidgetItem(
            self.Cd_Type_comboBox.currentText())
        )
        self.c_tableWidget.setItem(
            row, 1, QTableWidgetItem(c_no)
        )
        self.c_tableWidget.setItem(
            row, 2, QTableWidgetItem(self.C_name_lineEdit.text())
        )

        self.c_tableWidget.setItem(
            row, 3, QTableWidgetItem(self.C_address_lineEdit.text())
        )

        self.c_tableWidget.setItem(
            row, 4, QTableWidgetItem(self.c_maleOrFemale_comboBox.currentText())
        )

        self.c_tableWidget.setItem(
            row, 5, QTableWidgetItem(self.card_type_comboBox.currentText())
        )
        self.c_tableWidget.setItem(
            row, 6, QTableWidgetItem(self.Card_number_lineEdit.text())
         )        

        self.c_tableWidget.setItem(
            row, 7, QTableWidgetItem(self.Card_place_lineEdit.text())
         )   
        self.c_tableWidget.setItem(
            row, 8, QTableWidgetItem(card_issue_date)
        )
       
        
        self.c_tableWidget.setItem(
            row, 9, QTableWidgetItem(self.C_saved_or_not_lineEdit.text())
         ) 


        if self.Cd_Type_comboBox.currentText()=="بائع" :
            self.seller_comboBox.addItem(name,c_no) #ادراج اسماء البائعين لقائمة متصلا للبائع
 
         
 




    def add_cust(self):

        self.change_no_or_name_or_card_number.setText("1")
       
        
        self.add_cust_to_table()
        
         
        
        self.C_name_lineEdit.clear()
        self.C_no_lineEdit.clear()
        self.C_address_lineEdit.clear()
            
        self.Card_number_lineEdit.clear()
        self.Card_place_lineEdit.clear()
        self.card_date_Edit.clear()
        self.C_saved_or_not_lineEdit.clear()
        #self.c_maleOrFemale_comboBox.clear()
        #self.card_type_comboBox.clear()
        #print(self.c_tableWidget.item(0,0).text())

    def sum_price(self):
        
        qcount=self.Sd_count_n_lineEdit.text()

        qprice=self.sd_price_n_lineEdit.text()

        num = sumFun.text_to_number(qcount)

#        if num > 10 :
#            count_k = tafkeet(num,"QBG")
#        else :
#            count_k = tafkeet(num,"QSM")
        an = nb.ArNumbers()
        count_k = nb.number2text(num)
        #count_k = number_to_word(num)
        if num > 10:
            count_k += " قصبة"
        elif num == 1:
            count_k = " قصبة"
        elif num == 2:
            count_k = " قصبتين" 
        else:
            count_k += " قصب"
        
        self.Sd_count_k_lineEdit.setText(count_k)

        if qcount!="" and qprice!="":            
            qasab_count=int(self.Sd_count_n_lineEdit.text())
            qasab_price=int(self.sd_price_n_lineEdit.text())
            total=qasab_count*qasab_price
            an = nb.ArNumbers()
            count_k = nb.number2text(total)
            self.sd_total_k_lineEdit.setText(count_k)
            self.sd_total_lineEdit.setText(str(total))


    def add_sale_detiall(self):


        if self.all_price_n_lineEdit.text()=="" and self.sd_total_lineEdit.text()!="": 
            sd_total=self.sd_total_lineEdit.text()
            self.all_price_n_lineEdit.setText(sd_total)
        else:    
            sd_total_n=int(self.sd_total_lineEdit.text())
            d_all_price_n=int(self.all_price_n_lineEdit.text())
            d_all_price_n+=sd_total_n
            self.all_price_n_lineEdit.setText(str(d_all_price_n))


        sd_name=self.sd_name_lineEdit.text()
        Sd_count_n=self.Sd_count_n_lineEdit.text()
        Sd_count_k=self.Sd_count_k_lineEdit.text()
        sd_type=str(self.sd_type_comboBox.currentIndex()+1) 
        sd_shape=self.sd_shape_comboBox.currentText()
        sd_a1=self.sd_a1_lineEdit.text()
        sd_a2=self.sd_a2_lineEdit.text()
        sd_a3=self.sd_a3_lineEdit.text()
        sd_a4=self.sd_a4_lineEdit.text()
        sd_a5=self.sd_a5_lineEdit.text()
        sd_area=self.sd_area_lineEdit.text()
        sd_h1=self.sd_h1_lineEdit.text()
        sd_h2=self.sd_h2_lineEdit.text()
        sd_h3=self.sd_h3_lineEdit.text()
        sd_h4=self.sd_h4_lineEdit.text()
        sd_price_n=self.sd_price_n_lineEdit.text()
        sd_price_k=self.sd_price_k_lineEdit.text()
        sd_total=self.sd_total_lineEdit.text()
        sd_total_k=self.sd_total_k_lineEdit.text()
        
        max_sd_no=DatabaseClass.select_max_sd_no_from_sale_details_table()
        
        sd_no=sumFun.text_to_number(max_sd_no[0][0]) + 1
     
        DatabaseClass.insert_into_sale_details_table(sd_name, Sd_count_n, Sd_count_k, sd_type, sd_price_n, sd_price_k, sd_total, sd_total_k, sd_shape, sd_a1, sd_a2, sd_a3, sd_a4, sd_a5, sd_area, sd_h1, sd_h2, sd_h3, sd_h4,'', '')
        row=self.sd_tableWidget.rowCount()
        self.sd_tableWidget.insertRow(row)
        self.sd_tableWidget.setItem(row, 0, QTableWidgetItem(
            self.sd_name_lineEdit.text())
        )
        self.sd_tableWidget.setItem(
            row, 1, QTableWidgetItem(self.Sd_count_n_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 2, QTableWidgetItem(self.Sd_count_k_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 3, QTableWidgetItem(self.sd_type_comboBox.currentText())
        )

        self.sd_tableWidget.setItem(
            row, 4, QTableWidgetItem(self.sd_shape_comboBox.currentText())
        )

        self.sd_tableWidget.setItem(
            row, 5, QTableWidgetItem(self.sd_a1_lineEdit.text())
        )


        self.sd_tableWidget.setItem(
            row, 6, QTableWidgetItem(self.sd_a2_lineEdit.text())
        )
        self.sd_tableWidget.setItem(
            row, 7, QTableWidgetItem(self.sd_a3_lineEdit.text())
        )
        self.sd_tableWidget.setItem(
            row, 8, QTableWidgetItem(self.sd_a4_lineEdit.text())
        )
        self.sd_tableWidget.setItem(
            row, 9, QTableWidgetItem(self.sd_a5_lineEdit.text())
        )
        self.sd_tableWidget.setItem(
            row, 10, QTableWidgetItem(self.sd_area_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 11, QTableWidgetItem(self.sd_h1_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 12, QTableWidgetItem(self.sd_h2_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 13, QTableWidgetItem(self.sd_h3_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 14, QTableWidgetItem(self.sd_h4_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 15, QTableWidgetItem(self.sd_price_n_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 16, QTableWidgetItem(self.sd_price_k_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 17, QTableWidgetItem(self.sd_total_lineEdit.text())
        )

        self.sd_tableWidget.setItem(
            row, 18, QTableWidgetItem(self.sd_total_k_lineEdit.text())
        )


        self.sd_tableWidget.setItem(
            row, 19, QTableWidgetItem(str(sd_no))
        )

    def add_connect(self):


        if self.d_no_lineEdit1.text()!="":
            d_counter,d_myresult=DatabaseClass.select_doc_by_d_no(self.d_no_lineEdit1.text())
            if d_counter!=0:
                self.D_connect_save_or_not.setText("1")
            else:
                self.D_connect_save_or_not.setText("2")
        

        firest_seller_c_name=self.c_name_lineEdit2.text()
        clerk_c_name=self.c_name_lineEdit3.text()
        court_c_name=self.d_t_place_lineEdit1.text() 

        firest_seller_save_or_not="1"
        clerk_save_or_not="1"
        court_save_or_not="1" 
        
        if firest_seller_c_name!="":


            firest_seller_counter,firest_seller_myresulte=DatabaseClass.check_customers_saved(firest_seller_c_name)
            if firest_seller_counter==0:
                firest_seller_save_or_not="2"
                DatabaseClass.insertintocustomers_table(firest_seller_c_name," not found data ","0000-00-00","1",1," not found data "," not found data ",1)
                firest_seller_max_c_no=DatabaseClass.select_max_c_no()
                self.c_no_lineEdit_4.setText(str(sumFun.text_to_number(firest_seller_max_c_no[0][0]) + 1 ))

            else:
                self.c_no_lineEdit_4.setText(str(sumFun.text_to_number(firest_seller_myresulte[0][0])))    
        

        if clerk_c_name!="":

            clerk_counter,clerk_myresulte=DatabaseClass.check_customers_saved(clerk_c_name)
            if clerk_counter==0:
                clerk_save_or_not="2"
                DatabaseClass.insertintocustomers_table(clerk_c_name," not found data ","0000-00-00","1",2," not found data "," not found data ",1)
                clerk_max_c_no=DatabaseClass.select_max_c_no()
                self.c_no_lineEdit_5.setText(str(sumFun.text_to_number(clerk_max_c_no[0][0]) + 1))


            else:
                self.c_no_lineEdit_5.setText(str(clerk_myresulte[0][0]))    
        

        if court_c_name!="":

            court_counter,court_myresulte=DatabaseClass.check_customers_saved(court_c_name)
            if court_counter==0:
                court_save_or_not="2"
                DatabaseClass.insertintocustomers_table(court_c_name," not found data ","0000-00-00","1",2," not found data "," not found data ",1)

                court_max_c_no=DatabaseClass.select_max_c_no()
                self.c_no_lineEdit_6.setText(str(sumFun.text_to_number(court_max_c_no[0][0]) + 1))

            else:
                self.c_no_lineEdit_6.setText(str(court_myresulte[0][0]))    
        

        #sc_type = self.doc_type_comboBox.currentText()
        firest_seller_c_no=self.c_no_lineEdit_4.text()
        
        
        clerk_c_no=self.c_no_lineEdit_5.text()
        
       
        court_c_no=self.c_no_lineEdit_6.text()
        
       
        d_t_no=self.d_t_no_lineEdit1.text()
        
        D_connect_save_or_not_var=self.D_connect_save_or_not.text()

        D_hijri_date=str(self.D_hijri_date_Edit1.date().toPyDate().strftime('%d/%m/%Y'))
        D_miladi_date=str(self.D_miladi_date_Edit1.date().toPyDate().strftime('%d/%m/%Y'))
        D_h_t_date=str(self.D_h_t_date_Edit1.date().toPyDate().strftime('%d/%m/%Y'))
        D_m_t_date=str(self.D_m_t_date_Edit1.date().toPyDate().strftime('%d/%m/%Y'))
        doc_type_v=str(self.doc_type_comboBox.currentText())
        

        
        seller_c_no=self.seller_comboBox.currentData()
        seller_name=self.seller_comboBox.currentText()
        
    

    
        if self.D_connect_save_or_not.text()=="2" or self.D_connect_save_or_not.text()=="":
            self.save_docum_data_for_connect()
            max_d_no_my_resulte=DatabaseClass.select_max_d_no_from_docum()
            self.d_no_lineEdit1.setText(str(sumFun.text_to_number(max_d_no_my_resulte[0][0]) + 1))        
        
        d_no=self.d_no_lineEdit1.text()

        row=self.tableWidget_2.rowCount()
        self.tableWidget_2.insertRow(row)

        self.tableWidget_2.setItem(row, 0, QTableWidgetItem(d_no))
        self.tableWidget_2.setItem(row, 1, QTableWidgetItem(D_connect_save_or_not_var))

        self.tableWidget_2.setItem(row, 2, QTableWidgetItem(seller_c_no))
        self.tableWidget_2.setItem(row, 3, QTableWidgetItem(seller_name))

        self.tableWidget_2.setItem(row, 4, QTableWidgetItem(doc_type_v))
        self.tableWidget_2.setItem(row, 5, QTableWidgetItem(firest_seller_c_no))

        self.tableWidget_2.setItem(row, 6, QTableWidgetItem(firest_seller_c_name))
        self.tableWidget_2.setItem(row, 7, QTableWidgetItem(firest_seller_save_or_not))

        self.tableWidget_2.setItem(row, 8, QTableWidgetItem(clerk_c_no))
        self.tableWidget_2.setItem(row, 9, QTableWidgetItem(clerk_c_name))

        self.tableWidget_2.setItem(row, 10, QTableWidgetItem(clerk_save_or_not))


        self.tableWidget_2.setItem(row, 11, QTableWidgetItem(D_hijri_date))
        self.tableWidget_2.setItem(row, 12, QTableWidgetItem(D_miladi_date))

        self.tableWidget_2.setItem(row, 13, QTableWidgetItem(court_c_no))

        self.tableWidget_2.setItem(row, 14, QTableWidgetItem(court_c_name))
        self.tableWidget_2.setItem(row, 15, QTableWidgetItem(court_save_or_not))


        self.tableWidget_2.setItem(row, 16, QTableWidgetItem(D_h_t_date))

        self.tableWidget_2.setItem(row, 17, QTableWidgetItem(D_m_t_date))
        self.tableWidget_2.setItem(row, 18, QTableWidgetItem(d_t_no))
        self.tableWidget_2.setItem(row, 19, QTableWidgetItem(doc_type_v))



    # Define a general function to delete a row from any given table
    def delete_row(self, table):
            current_row = table.currentRow()
            if current_row >= 0:
                table.removeRow(current_row)

# Call the function for each table you want to delete a row from




    def delete_cust(self):
        self.delete_row(self.c_tableWidget)


    def delete_sd_table(self):
        self.delete_row(self.sd_tableWidget)


    def delete_tableWidget_2(self):
        self.delete_row(self.tableWidget_2)


######################################################
if __name__ == "__main__":
    import sys
    app=QtWidgets.QApplication(sys.argv)
    Widget=QtWidgets.QWidget()
    ui=Ui_Widget()
    ui.setupUi(Widget)
    Widget.show()
    sys.exit(app.exec_())
